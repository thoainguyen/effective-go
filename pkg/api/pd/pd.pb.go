// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/pd/pd.proto

package pd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TsoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TsoRequest) Reset()         { *m = TsoRequest{} }
func (m *TsoRequest) String() string { return proto.CompactTextString(m) }
func (*TsoRequest) ProtoMessage()    {}
func (*TsoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_711e02b78efe5eb0, []int{0}
}

func (m *TsoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TsoRequest.Unmarshal(m, b)
}
func (m *TsoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TsoRequest.Marshal(b, m, deterministic)
}
func (m *TsoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TsoRequest.Merge(m, src)
}
func (m *TsoRequest) XXX_Size() int {
	return xxx_messageInfo_TsoRequest.Size(m)
}
func (m *TsoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TsoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TsoRequest proto.InternalMessageInfo

type TsoReponse struct {
	Timestamp            uint64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TsoReponse) Reset()         { *m = TsoReponse{} }
func (m *TsoReponse) String() string { return proto.CompactTextString(m) }
func (*TsoReponse) ProtoMessage()    {}
func (*TsoReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_711e02b78efe5eb0, []int{1}
}

func (m *TsoReponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TsoReponse.Unmarshal(m, b)
}
func (m *TsoReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TsoReponse.Marshal(b, m, deterministic)
}
func (m *TsoReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TsoReponse.Merge(m, src)
}
func (m *TsoReponse) XXX_Size() int {
	return xxx_messageInfo_TsoReponse.Size(m)
}
func (m *TsoReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TsoReponse.DiscardUnknown(m)
}

var xxx_messageInfo_TsoReponse proto.InternalMessageInfo

func (m *TsoReponse) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*TsoRequest)(nil), "pd.TsoRequest")
	proto.RegisterType((*TsoReponse)(nil), "pd.TsoReponse")
}

func init() { proto.RegisterFile("api/pd/pd.proto", fileDescriptor_711e02b78efe5eb0) }

var fileDescriptor_711e02b78efe5eb0 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x2c, 0xc8, 0xd4,
	0x2f, 0x48, 0xd1, 0x2f, 0x48, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x91,
	0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xc9, 0x25, 0xe6, 0xe5, 0xe5, 0x97, 0x24,
	0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x54, 0x28, 0xf1, 0x70, 0x71, 0x85, 0x14, 0xe7, 0x07, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0x69, 0x41, 0x79, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x32,
	0x5c, 0x9c, 0x25, 0x99, 0xb9, 0xa9, 0xc5, 0x25, 0x89, 0xb9, 0x05, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x2c, 0x41, 0x08, 0x01, 0xa3, 0x30, 0x2e, 0xce, 0x00, 0x97, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4,
	0x54, 0x21, 0x4f, 0x2e, 0x1e, 0xf7, 0xd4, 0x92, 0x10, 0x98, 0xa4, 0x10, 0x9f, 0x5e, 0x41, 0x8a,
	0x1e, 0xc2, 0x60, 0x29, 0x04, 0x1f, 0x6c, 0xb4, 0x92, 0x64, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0x84,
	0x85, 0x04, 0xf5, 0xa1, 0x4e, 0x86, 0x9b, 0xeb, 0xc4, 0xc5, 0xc5, 0x54, 0x90, 0xe2, 0xc4, 0x54,
	0x90, 0x12, 0xc0, 0x98, 0xc4, 0x06, 0x76, 0xa4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xc1,
	0x39, 0xe7, 0xd9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PDServiceClient is the client API for PDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PDServiceClient interface {
	GetTimestamp(ctx context.Context, in *TsoRequest, opts ...grpc.CallOption) (*TsoReponse, error)
}

type pDServiceClient struct {
	cc *grpc.ClientConn
}

func NewPDServiceClient(cc *grpc.ClientConn) PDServiceClient {
	return &pDServiceClient{cc}
}

func (c *pDServiceClient) GetTimestamp(ctx context.Context, in *TsoRequest, opts ...grpc.CallOption) (*TsoReponse, error) {
	out := new(TsoReponse)
	err := c.cc.Invoke(ctx, "/pd.PDService/GetTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDServiceServer is the server API for PDService service.
type PDServiceServer interface {
	GetTimestamp(context.Context, *TsoRequest) (*TsoReponse, error)
}

// UnimplementedPDServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPDServiceServer struct {
}

func (*UnimplementedPDServiceServer) GetTimestamp(ctx context.Context, req *TsoRequest) (*TsoReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimestamp not implemented")
}

func RegisterPDServiceServer(s *grpc.Server, srv PDServiceServer) {
	s.RegisterService(&_PDService_serviceDesc, srv)
}

func _PDService_GetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).GetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pd.PDService/GetTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).GetTimestamp(ctx, req.(*TsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pd.PDService",
	HandlerType: (*PDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimestamp",
			Handler:    _PDService_GetTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pd/pd.proto",
}
